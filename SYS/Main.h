#ifndef __MAIN__
#define __MAIN__ 1

#include <ntifs.h>
#include <ntddk.h>
#include <intrin.h>
//#include <wdf.h>  
//#include <ndis.h>            /// Inc
#include <ntintsafe.h>       /// Inc
//#include <ntstrsafe.h>       /// Inc
//#include "memory_module.h"


#define CALL_COMPLETE   0xC0371E7E
#define POOL_TAG 'Inj'
#define DPRINT(format, ...) DbgPrintEx(DPFLTR_IHVDRIVER_ID, DPFLTR_INFO_LEVEL, format, __VA_ARGS__)


#define IOCTL_InitDriver CTL_CODE(FILE_DEVICE_UNKNOWN, 0x2000, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_Change_Target CTL_CODE(FILE_DEVICE_UNKNOWN, 0x2001, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_Clean_Target CTL_CODE(FILE_DEVICE_UNKNOWN, 0x2002, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
#define IOCTL_Power_OnOff CTL_CODE(FILE_DEVICE_UNKNOWN, 0x2003, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)




LPSTR GetProcessNameFromPid(HANDLE pid);

typedef NTSTATUS(*ZWREADVIRTUALMEMORY)(
	IN HANDLE               ProcessHandle,
	IN PVOID                BaseAddress,
	OUT PVOID               Buffer,
	IN ULONG                NumberOfBytesToRead,
	OUT PULONG              NumberOfBytesReaded OPTIONAL
	);



typedef NTSTATUS(NTAPI *ZwWriteVirtualMemory_t)(
	IN HANDLE               ProcessHandle,
	IN PVOID                BaseAddress,
	IN PVOID                Buffer,
	IN ULONG                NumberOfBytesToWrite,
	OUT PULONG              NumberOfBytesWritten OPTIONAL);


typedef NTSTATUS(NTAPI *ZwCreateProcess_t)(
	OUT PHANDLE            ProcessHandle,
	IN  ACCESS_MASK        DesiredAccess,
	IN  POBJECT_ATTRIBUTES ObjectAttributes,
	IN  HANDLE             InheriteFromProcessHandle,
	IN  BOOLEAN            InheritHandles,
	IN  HANDLE             SectionHandle    OPTIONAL,
	IN  HANDLE             DebugPort        OPTIONAL,
	IN  HANDLE             ExceptionPort    OPTIONAL);



typedef NTSTATUS(*QUERY_INFO_PROCESS) (
	__in HANDLE ProcessHandle,
	__in PROCESSINFOCLASS ProcessInformationClass,
	__out_bcount(ProcessInformationLength) PVOID ProcessInformation,
	__in ULONG ProcessInformationLength,
	__out_opt PULONG ReturnLength
	);

typedef NTSTATUS(*PLDR_LOAD_DLL)(PWSTR, PULONG, PUNICODE_STRING, PVOID*);



ZWREADVIRTUALMEMORY ZwReadVirtualMemory;
ZwWriteVirtualMemory_t ZwWriteVirtualMemory;
ZwCreateProcess_t ZwCreateProcess;
PLDR_LOAD_DLL LdrLoadDll;




#define PROCESS_TERMINATE         0x0001  
#define PROCESS_VM_OPERATION      0x0008  
#define PROCESS_VM_READ           0x0010  
#define PROCESS_VM_WRITE          0x0020  

NTSTATUS ProtectProcess(BOOLEAN Enable);

OB_PREOP_CALLBACK_STATUS preCall(PVOID RegistrationContext, POB_PRE_OPERATION_INFORMATION pOperationInformation);

typedef struct _LDR_DATA_TABLE_ENTRY64
{
	LIST_ENTRY64    InLoadOrderLinks;
	LIST_ENTRY64    InMemoryOrderLinks;
	LIST_ENTRY64    InInitializationOrderLinks;
	PVOID            DllBase;
	PVOID            EntryPoint;
	ULONG            SizeOfImage;
	UNICODE_STRING    FullDllName;
	UNICODE_STRING     BaseDllName;
	ULONG            Flags;
	USHORT            LoadCount;
	USHORT            TlsIndex;
	PVOID            SectionPointer;
	ULONG            CheckSum;
	PVOID            LoadedImports;
	PVOID            EntryPointActivationContext;
	PVOID            PatchInformation;
	LIST_ENTRY64    ForwarderLinks;
	LIST_ENTRY64    ServiceTagLinks;
	LIST_ENTRY64    StaticLinks;
	PVOID            ContextInformation;
	ULONG64            OriginalBase;
	LARGE_INTEGER    LoadTime;
} LDR_DATA_TABLE_ENTRY64, *PLDR_DATA_TABLE_ENTRY64;


NTKERNELAPI PVOID NTAPI PsGetCurrentProcessWow64Process();


VOID EnableObType(POBJECT_TYPE ObjectType);

OB_PREOP_CALLBACK_STATUS PreCallBack(PVOID RegistrationContext, POB_PRE_OPERATION_INFORMATION OperationInformation);
NTSTATUS ProtectFileByObRegisterCallbacks();


NTSTATUS UnLoadDriver(PDRIVER_OBJECT DriverObject);
NTSTATUS DisPatchKMS(PDEVICE_OBJECT DeviceObject, PIRP pIrp);











#endif // !__MAIN__