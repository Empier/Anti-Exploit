#include <stdio.h>
#include <windows.h>
//#include <string.h>
//#include <iostream>
#include "Loader.h"

//using namespace std;

//extern "C" __declspec(dllexport) BOOL LoadDriver(void);
//extern "C" __declspec(dllexport) BOOL UnloadDriver(void);




extern "C" __declspec(dllexport) void InitDriver(wchar_t val[]);
extern "C" __declspec(dllexport) void Change_Target(char val[]);
extern "C" __declspec(dllexport) void Clean_Target();

HMODULE g_hDLL = NULL;
HANDLE kernel = 0;
int initFlag = 0;

const char MY_DRIVER[] = "stscae64";
char MY_PATH[MAX_PATH]="";
Loader _Loader = NULL;


extern "C" __declspec(dllexport) BOOL LoadDriver()
{
	HKEY hKey;
	char str[MAX_PATH];
	wchar_t str_u[MAX_PATH];
	DWORD data_size = sizeof(str);
	
	
	/*old*/

		/*
		SC_HANDLE hSCM;
		SC_HANDLE hService;



		GetCurrentDirectoryA(MAX_PATH, MY_PATH);
		strcat(MY_PATH, "\\stscae64.sys");

		//printf("%s\n", MY_PATH);
		hSCM = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);
		if (!hSCM) {
			printf("Unable to open the service control manager...\n");
			return FALSE;
		}
		hService = CreateService(hSCM,
			MY_DRIVER,
			MY_DRIVER,
			SERVICE_ALL_ACCESS,
			SERVICE_KERNEL_DRIVER,
			SERVICE_DEMAND_START,
			SERVICE_ERROR_NORMAL,
			MY_PATH,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL);
		if (!hService) {
			hService = OpenService(hSCM, MY_DRIVER, SERVICE_ALL_ACCESS);
			if (!hService) {
				printf(" Unable to Create/open the Service...\n");
				CloseServiceHandle(hSCM);
				return FALSE;
			}
		}
		if (!StartService(hService, 0, NULL) &&
			(GetLastError() != ERROR_SERVICE_ALREADY_RUNNING)) {
			printf("Unable to start the Service ...\n");
			CloseServiceHandle(hSCM);
			CloseServiceHandle(hService);
			return FALSE;
		}
		CloseServiceHandle(hSCM);
		CloseServiceHandle(hService);
		*/
		_Loader = Loader("stscae64");
		_Loader.InstallDriver();
		_Loader.StartDriver();
	/*
	data_size = sizeof(str);
	RegOpenKeyExA(HKEY_USERS, ".DEFAULT\\Software\\SaintSecurity\\MSX", 0, KEY_ALL_ACCESS, &hKey);
	int ret = RegQueryValueExA(hKey, "ProgramDir", 0, NULL, (LPBYTE)str, &data_size);
	strcat(str, "\\\x00");
	int nLen = MultiByteToWideChar(CP_ACP, 0, str, strlen(str), NULL, NULL);
	MultiByteToWideChar(CP_ACP, 0, str, strlen(str), str_u, nLen);
	str_u[nLen] = 0;
	wprintf(L"Init dir:%s\n", str_u);
	InitDriver(str_u);
	*/
	return TRUE;
}
extern "C" __declspec(dllexport) BOOL UnloadDriver(void)
{
	/*old*/
	
	_Loader = Loader("stscae64");
	_Loader.StopDriver();
	_Loader.UnInstallDriver();
	_Loader.~Loader();
	/*
	SC_HANDLE hSCM;
	SC_HANDLE hService;
	SERVICE_STATUS svcStatus;

	//CloseHandle(kernel);

	hSCM = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);
	if (!hSCM) {
		printf(" Unable to open the service contirol manager...\n");
		return FALSE;
	}
	hService = OpenService(hSCM, MY_DRIVER, SERVICE_ALL_ACCESS);
	if (!hService) {
		printf("Unable to open the service...\n");
		CloseServiceHandle(hSCM);
		return FALSE;
	}
	if (!ControlService(hService, SERVICE_CONTROL_STOP, &svcStatus)) {
		printf("Unable to stop the service...\n");
		CloseServiceHandle(hSCM);
		CloseServiceHandle(hService);
		return FALSE;
	}
	if (!DeleteService(hService)) {
		printf("Unable to delete the service ...\n");
		CloseServiceHandle(hSCM);
		CloseServiceHandle(hService);
		return FALSE;
	}
	CloseServiceHandle(hSCM);
	CloseServiceHandle(hService);
	return TRUE;
	*/

	return TRUE;
}

extern "C" __declspec(dllexport) void FirstMSX()
{
	HKEY hKey;
	DWORD SetValue = 1;
	char CurrentDirectory[MAX_PATH];

	if (RegCreateKeyA(HKEY_USERS, ".DEFAULT\\Software\\SaintSecurity\\MSX",&hKey))
	{
		printf("생성하지 못했습니다.");
		return;
	}
	GetCurrentDirectoryA(MAX_PATH, CurrentDirectory);
	RegSetValueExA(hKey, "Init", 0, REG_DWORD, (LPBYTE)&SetValue, sizeof(SetValue));
	RegSetValueExA(hKey, "status", 0, REG_DWORD, (LPBYTE)&SetValue, sizeof(SetValue));
	RegSetValueExA(hKey, "ProgramDir", 0, REG_SZ, (LPBYTE)CurrentDirectory, sizeof(CurrentDirectory) + 1);
	RegSetValueExA(hKey, "Shield001", 0, REG_SZ, (LPBYTE)"JavaScript,wscript.exe,3", sizeof("JavaScript,wscript.exe,3") + 1);
	RegSetValueExA(hKey, "Shield002", 0, REG_SZ, (LPBYTE)"Internet Explorer,iexplore.exe,1", sizeof("Internet Explorer,iexplore.exe,1") + 1);
	RegSetValueExA(hKey, "Shield003", 0, REG_SZ, (LPBYTE)"Chrome,test.exe,1", sizeof("Chrome,test.exe,1") + 1);
	RegCloseKey(hKey);
	LoadDriver();

	system("msx-svc.exe i");
	system("sc start MsxSvc");
	//InitDriver();
	
}

extern "C" __declspec(dllexport) void PowerOnOff(BOOL flag)
{
	DWORD ret = 0;
	LONG ret2;
	HKEY hKey;
	DWORD SetValue = 0;



	kernel = CreateFileW(L"\\\\.\\Empire", 0xC0000000, 3u, 0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0);

	//wprintf(L"--%s\n", dlldir);
	DWORD cc = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x2003, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
	DeviceIoControl(kernel, cc, (LPVOID)&flag, MAX_PATH, (LPVOID)&flag, MAX_PATH, &ret, 0);

	if (flag == false)
	{
		ret2 = RegOpenKeyEx(HKEY_USERS, ".DEFAULT\\Software\\SaintSecurity\\MSX",0,KEY_ALL_ACCESS,&hKey);
		if (ret2 == ERROR_SUCCESS)
		{
			SetValue = 0;
			RegSetValueExA(hKey,"status",0,REG_DWORD,(BYTE*)&SetValue,sizeof(SetValue));
			RegCloseKey(hKey);
		}

		
	}
	else {
		ret2 = RegOpenKeyEx(HKEY_USERS, ".DEFAULT\\Software\\SaintSecurity\\MSX", 0, KEY_ALL_ACCESS, &hKey);
		if (ret2 == ERROR_SUCCESS)
		{
			SetValue = 1;
			RegSetValueExA(hKey, "status", 0, REG_DWORD, (BYTE*)&SetValue, sizeof(SetValue));
			RegCloseKey(hKey);
		}
	}


	CloseHandle(kernel);
}

extern "C" __declspec(dllexport) void InitDriver(wchar_t val[])
{
	DWORD ret = 0;
	wchar_t dlldir[MAX_PATH];

	HKEY hKey;
	char key[256];
	char buf[128];
	DWORD size = 0;
	char *ptr = NULL;
	char *context= NULL;

	kernel = CreateFileW(L"\\\\.\\Empire", 0xC0000000, 3u, 0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0);

	wcscpy(dlldir, val);
	//wprintf(L"--%s\n", dlldir);
	DWORD cc = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x2000, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
	DeviceIoControl(kernel, cc, (LPVOID)&dlldir, MAX_PATH, (LPVOID)&dlldir, MAX_PATH, &ret, 0);

	CloseHandle(kernel);

	Clean_Target();
	RegOpenKeyExA(HKEY_USERS, ".DEFAULT\\Software\\SaintSecurity\\MSX", 0, KEY_ALL_ACCESS, &hKey);
	for (int i = 1; i < 100; i++)
	{
		sprintf(key, "Shield%03d", i);
		size = 128;
		int ret = RegQueryValueExA(hKey, key, 0, NULL, (LPBYTE)buf, &size);
		if (ret == 0)
		{
			ptr = strtok_s((char *)buf, ",", &context);
			ptr = strtok_s(NULL, ",", &context);
			Change_Target(ptr);
		}
	}
	RegCloseKey(hKey);


	//Change_Target();

}
extern "C" __declspec(dllexport) void Change_Target(char val[])
{
	DWORD ret = -1;
	char processname[64];
	/*
	struct input
	{
		char processname[64];
	}*pinp;
	pinp = (input *)malloc(sizeof(input));
	*/
	kernel = CreateFileW(L"\\\\.\\Empire", 0xC0000000, 3u, 0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0);

	strcpy(processname, val);

	DWORD cc = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x2001, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
	DeviceIoControl(kernel, cc, (LPVOID)&processname, 128, (LPVOID)&processname, 128, &ret, 0);
	
	CloseHandle(kernel);
	//free(pinp);
}

extern "C" __declspec(dllexport) void Clean_Target()
{
	DWORD ret = 0;
	kernel = CreateFileW(L"\\\\.\\Empire", 0xC0000000, 3u, 0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0);

	DWORD cc = CTL_CODE(FILE_DEVICE_UNKNOWN, 0x2002, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS);
	DeviceIoControl(kernel, cc, (LPVOID)NULL, 0, (LPVOID)NULL, 0, &ret, 0);
	CloseHandle(kernel);
}

BOOL APIENTRY DllMain(HMODULE hModul, DWORD ul_reason_for_ca, LPVOID lpReserve)
{
	switch (ul_reason_for_ca)
	{
	case DLL_PROCESS_ATTACH:
		g_hDLL = hModul;
		//AllocConsole();
		//freopen("CON", "w", stdout);
		//LoadDriver();

		//kernel = CreateFileW(L"\\\\.\\Empire", 0xC0000000, 3u, 0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0);
		
		break;
	case DLL_THREAD_ATTACH:
		//UnloadDriver();
		//kernel = CreateFileW(L"\\\\.\\Empire", 0xC0000000, 3u, 0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0);


		//CloseHandle(kernel);
		break;
	case DLL_THREAD_DETACH:
		break;
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}
