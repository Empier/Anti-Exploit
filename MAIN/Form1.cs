using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Diagnostics;
using System.Windows.Forms;
using Microsoft.Win32;



using System.Runtime.InteropServices;



namespace MAIN
{

    public partial class Form1 : Form
    {

        private const UInt32 StdOutputHandle = 0xFFFFFFF5;


        public struct setting_value
        {
            public bool use_tray;
            public bool auto_update;
            
        };
        RegistryKey reg_path3;
        int status = 0;
        setting_value sv = new setting_value();

        [DllImport("kernel32.dll")]
        private static extern IntPtr GetStdHandle(UInt32 nStdHandle);
        [DllImport("kernel32.dll")]
        private static extern void SetStdHandle(UInt32 nStdHandle, IntPtr handle);
        [DllImport("kernel32")]
        static extern bool AllocConsole();

        [DllImport("MSX_DLL.dll")]
        static extern void PowerOnOff(bool flag);
        [DllImport("MSX_DLL.dll")]
        static extern bool LoadDriver();
        [DllImport("MSX_DLL.dll")]
        static extern bool UnloadDriver();
        [DllImport("MSX_DLL.dll")]
        static extern void FirstMSX();

        [DllImport("MSX_DLL.dll")]
        static extern void Clean_Target();

        [DllImport("MSX_DLL.dll")]
        static extern void Change_Target( char[] lpProcName);
      
        [DllImport("MSX_DLL.dll")]
        static extern void InitDriver(byte[] dlldir );



        [DllImport("kernel32")]
        public static extern Int32 IsWow64Process(IntPtr hProcess, out Boolean bWow64Process);
        [DllImport("kernel32")]
        public static extern void CloseHandle(IntPtr hProcess);
        [DllImport("kernel32")]
        public static extern IntPtr OpenProcess(Int32 Access, Boolean InheritHandle, Int32 ProcessId);
        [DllImport("kernel32")]
        public static extern IntPtr CreateToolhelp32Snapshot(Int32 dwFlags, Int32 th32ProcessID);
        [DllImport("kernel32")]
        public static extern Int32 Process32First(IntPtr hSnapshot, ref PROCESSENTRY32 pe32);
        [DllImport("kernel32")]
        public static extern Int32 Process32Next(IntPtr hSnapshot, ref PROCESSENTRY32 pe32);

        public const Int32 MAX_PATH = 260;
        public const Int32 TH32CS_SNAPPROCESS = 2;


        public const Int32 PROCESS_QUERY_INFORMATION = 0x400;
        public const Int32 PROCESS_QUERY_LIMITED_INFORMATION = 0x1000;

        [StructLayout(LayoutKind.Sequential)]
        public struct PROCESSENTRY32
        {
            public Int32 dwSize;
            public Int32 cntUsage;
            public Int32 th32ProcessID;
            public IntPtr th32DefaultHeapID;
            public Int32 th32ModuleID;
            public Int32 cntThreads;
            public Int32 th32ParentProcessID;
            public Int32 pcPriClassBase;
            public Int32 dwFlags;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = MAX_PATH)]
            public String szExeFile;

            public static Int32 Size
            {
                get { return Marshal.SizeOf(typeof(PROCESSENTRY32)); }
            }
        }


        public static List<PROCESSENTRY32> EnumProcesses()
        {
            IntPtr hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
            if (hSnapshot == IntPtr.Zero)
                return null;

            PROCESSENTRY32 pe32 = new PROCESSENTRY32();
            pe32.dwSize = PROCESSENTRY32.Size;
            if (Process32First(hSnapshot, ref pe32) == 0)
            {
                CloseHandle(hSnapshot);
                return null;
            }

            List<PROCESSENTRY32> lstProcesses = new List<PROCESSENTRY32>();
            do
            {
                lstProcesses.Add(pe32);
            } while (Process32Next(hSnapshot, ref pe32) != 0);

            CloseHandle(hSnapshot);
            return lstProcesses;
        }
        







        public Form1()
        {
            InitializeComponent();
        }

        private void listView1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void tabPage2_Click(object sender, EventArgs e)
        {
           
        }

        private void treeView1_AfterSelect(object sender, TreeViewEventArgs e)
        {

        }



        private int GPEP(int pid)
        {
            int ret = 0;
        EnterPID:
            Int32 ProcessId;

            ProcessId = pid;
            IntPtr hProcess = OpenProcess(PROCESS_QUERY_INFORMATION, false, ProcessId);
            if (hProcess == IntPtr.Zero)
                hProcess = OpenProcess(PROCESS_QUERY_LIMITED_INFORMATION, false, ProcessId);

            if (hProcess == IntPtr.Zero)
            {
              //  Console.WriteLine("프로세스 핸들 열기 실패!");
                return 0;
            }

            Boolean result = false;
            if (IsWow64Process(hProcess, out result) != 0)
            {
                if (!result)
                {
                   // Console.WriteLine("32비트 프로세스입니다.");
                    ret = 32;
                }
                else
                {
                   // Console.WriteLine("64비트 프로세스입니다.");
                    ret = 64;

                }
            }
            else
            {
                Console.WriteLine("정보 확인 실패!");
                ret = 0;
            }
            CloseHandle(hProcess);
            //Console.ReadKey(true);
            return ret;
        }

        void Process_List()
        {
            Console.WriteLine("프로세스 목록을 가져오는 중입니다!");
            List<PROCESSENTRY32> processes = EnumProcesses();

            if (processes != null)
            {
                foreach (PROCESSENTRY32 pe32 in processes)
                {
                    Console.WriteLine("{0,-5}\t{1,-5}\t{2,-3}\t{3}", pe32.th32ProcessID, pe32.th32ParentProcessID, GPEP(pe32.th32ProcessID), pe32.szExeFile);

                }
            }
            else
                Console.WriteLine("목록 정보 가져오기 실패!");

            Console.ReadKey(true);
        }

        bool SetShieldList(string a,string b)
        {
            RegistryKey reg_path = Registry.Users.OpenSubKey(@".DEFAULT\\Software\\SaintSecurity\\MSX",true);
            int i = 1;
            for (; i < 100; i++)
            {
                //if()

                string reg_name = "Shield" + string.Format("{0:D3}", i);
                object C = reg_path.GetValue(reg_name);
                if (C != null)
                {
                     continue;
                }
                else
                {
                    //string reg_name = "Shield" + string.Format("{0:D3}", i);
                    reg_path.SetValue(reg_name, String.Format("{0},{1},1",a,b), RegistryValueKind.String);
                   
                    //Console.WriteLine(String.Format("{0},{1},1", a, b));

                    break;
                }


            }
            reg_path.Close();
            if (i == 100)
                return false;
            else
                return true;
        }

        void DelShieldList(string name)
        {
            RegistryKey reg_path = Registry.Users.OpenSubKey(@".DEFAULT\\Software\\SaintSecurity\\MSX",true);


            for (int i = 1; i < 100; i++)
            {
                string reg_name = "Shield" + string.Format("{0:D3}", i);
                object a = reg_path.GetValue(reg_name);
                if (a != null)
                {
                    string[] ShieldName = a.ToString().Split(new char[] { ',' });

                    if(string.Compare(ShieldName[1],name)==0)
                    {
                        reg_path.DeleteValue(reg_name);
                        break;
                    }
                }
                else
                {
                    continue;
                }


            }

            reg_path.Close();

        }


        void GetShieldList(RegistryKey reg_path)
        {
            for (int i = 1; i < 100; i++)
            {
                string reg_name = "Shield" + string.Format("{0:D3}", i);
                object a = reg_path.GetValue(reg_name);
                if (a!=null)
                {
                    string[] ShieldName = a.ToString().Split(new char[] { ',' });

                    string[] row = { ShieldName[0], ShieldName[1] };
                    var listViewItem = new ListViewItem(row);
                    listView1.Items.Add(listViewItem);
                }
                else
                {
                    continue;
                }
                

            }

        }
        private void Form1_Load(object sender, EventArgs e)
        {
            //AllocConsole();

            //DateTime today = DateTime.Now;
            //string a=string.Format("{0:[yyyy/M/d] : ASDFASDFASDFASDF}", today);

            //First Run
            RegistryKey reg_path = Registry.Users.OpenSubKey(@".DEFAULT\\Software\\SaintSecurity\\MSX");
            if (reg_path == null)
            {
                FirstMSX();
               //System.Diagnostics.Process.Start(a);
                
            }
            else
                reg_path.Close();
            
          
            /*Reg Info Load*/
            reg_path = Registry.Users.OpenSubKey(@".DEFAULT\\Software\\SaintSecurity\\MSX");
            GetShieldList(reg_path);
            string dir_path = reg_path.GetValue("ProgramDir").ToString(); ;
            status = Convert.ToInt32(reg_path.GetValue("status"));
            if(status==1)
                button3.Text = "Stop Protect";
            else
                button3.Text = "Start Protect";
            reg_path.Close();

            //InitDriver(Encoding.Unicode.GetBytes((dir_path + "\\stscae64.dll")));
            //listBox1.DataSource = File.ReadAllLines(dir_path+"\\Logs\\Logs.log");

            /*
            reg_path3 = Registry.Users.OpenSubKey(@".DEFAULT\\Software\\SaintSecurity\\MSX\\Settings",true);   
            checkBox1.Checked = Convert.ToBoolean(reg_path3.GetValue("S001")) ;
            checkBox2.Checked = Convert.ToBoolean(reg_path3.GetValue("S002"));
            reg_path3.Close();
            
            if(checkBox1.Checked==true) // check ok
            {
               // Update();
            }
            */

            listBox1.DataSource = File.ReadAllLines(dir_path + "\\Logs\\Logs.log");

        }

        public static void listview_patch(ListViewItem listViewItem)
        {
            
        }

        private void tabPage1_Click(object sender, EventArgs e)
        {

        }

        private void listView1_SelectedIndexChanged_1(object sender, EventArgs e)
        {

        }

      

        public void button1_Click(object sender, EventArgs e)
        {
           
            Form2 dlg = new Form2();

            dlg.ShowDialog();


            if (dlg.addprocess != null)
            {
                bool ret=SetShieldList(dlg.addprocess.SubItems[0].Text, dlg.addprocess.SubItems[1].Text);

                if (ret == true)
                {
                    listView1.Items.Add(dlg.addprocess);
                }
                else
                {
                    MessageBox.Show("더 이상 추가할 수 없습니다.");
                    return;
                }


                //Console.WriteLine(dlg.addprocess.SubItems[1].Text);
                

                Clean_Target();

                foreach (ListViewItem item in listView1.Items)
                {
                    Change_Target(item.SubItems[1].Text.ToCharArray());
                }

            }

            


        }

        private void button2_Click(object sender, EventArgs e)
        {
            UnloadDriver();
            if (listView1.SelectedItems.Count > 0)
            {

                DelShieldList(listView1.SelectedItems[0].SubItems[1].Text);
                
                listView1.SelectedItems[0].Remove();
                Clean_Target();

                foreach (ListViewItem item in listView1.Items)
                {
                    Change_Target(item.SubItems[1].Text.ToCharArray());

                }
            }
            else
            {
                MessageBox.Show("하나이상의 대상을 선택해주십시오.");
            }
        }

        private void listView2_SelectedIndexChanged(object sender, EventArgs e)
        {
            
        }

        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            

        }

        private void tabPage3_Click(object sender, EventArgs e)
        {
           
        }

        private void tabPage4_Click(object sender, EventArgs e)
        {

        }

        private void label4_Click(object sender, EventArgs e)
        {

        }

        private void label3_Click(object sender, EventArgs e)
        {

        }

        private void checkBox5_CheckedChanged(object sender, EventArgs e)
        {
            
        }

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            
            sv.auto_update = checkBox1.Checked;


            reg_path3.SetValue("S001", Convert.ToInt32(sv.auto_update), RegistryValueKind.DWord);


        }

        private void checkBox2_CheckedChanged(object sender, EventArgs e)
        {
            sv.use_tray = checkBox2.Checked;

            reg_path3.SetValue("S002", Convert.ToInt32(sv.use_tray), RegistryValueKind.DWord);

        }

        private void button3_Click(object sender, EventArgs e)
        {
            if(status==1)
            {
                status = 0;
                PowerOnOff(false);//false 0
                button3.Text = "Start Protect";
            }
            else if(status==0)
            {

                /*
                RegistryKey reg_path = Registry.Users.OpenSubKey(@".DEFAULT\\Software\\SaintSecurity\\MSX",true);
                reg_path.SetValue("status", 1, RegistryValueKind.DWord);
                */
                status = 1;
     
                PowerOnOff(true);
      
                button3.Text = "Stop Protect";
            }
        }
    }

}
