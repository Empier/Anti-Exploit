<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        gg==
</value>
  </data>
</root>